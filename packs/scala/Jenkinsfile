//Created by: Vyshakh P Rad
//Maintainer: Vyshakh P Rad

pipeline {
    agent { label "jenkins-gradle" }

    environment {
        JX_AGENT            = "scala"
        ORG                 = 'REPLACE_ME_ORG'
        APP_NAME            = 'REPLACE_ME_APP_NAME'
        GIT_PROVIDER        = 'REPLACE_ME_GIT_PROVIDER'
        CHARTS_PATH         = "./charts/$APP_NAME"
        SNAPSHOT_VERSION    = "0.0.0-snapshot-$BRANCH_NAME-$BUILD_NUMBER".toLowerCase()
        PREVIEW_NAMESPACE   = "$APP_NAME-$BRANCH_NAME".toLowerCase()
        HELM_RELEASE        = "$PREVIEW_NAMESPACE".toLowerCase()
        CHARTMUSEUM_CREDS   = credentials('jenkins-x-chartmuseum')

        _HOME               = "/home/jenkins"
        _APP_ROOT           = "."
        _BUILD_ROOT         = "."
        _CHARTS_PATH        = "$_BUILD_ROOT/charts/$APP_NAME"

        _ENV_ALPHA          = 'alpha'
        _ENV_BETA           = 'beta'
    }
    stages {
        stage('Env Info') {
            steps {
                container(JX_AGENT) {
                    sh "printenv"
                    sh "jx version -b true"
                }
            }
        }

        stage('Build Release') {
            steps {
                dir(_BUILD_ROOT) {
                    container(JX_AGENT) {
                        checkout scm
                        // ensure we're not on a detached head
                        sh "git checkout $BRANCH_NAME"
                        sh "git config --global credential.helper store"
                        sh "jx step validate --min-jx-version 1.1.73"
                        sh "jx step git credentials"

                        // so we can retrieve the version in later steps
                        sh 'if [ "$BRANCH_NAME" = "master" ]; then echo $(jx-release-version) > VERSION; else echo $(jx-release-version)-snapshot-$BRANCH_NAME-$BUILD_NUMBER-$(git rev-parse --short HEAD) > VERSION; fi'
                        sh 'cat VERSION'
                    }
                }

                dir(_CHARTS_PATH) {
                    container(JX_AGENT) {
                        sh 'if [ "$BRANCH_NAME" = "master" ]; then make tag; else make replace; fi'
                    }
                }

                dir(_BUILD_ROOT) {
                    container(JX_AGENT) {
                        sh 'make build'

                        sh 'export VERSION=`cat VERSION` && skaffold run -f skaffold.yaml'
                        sh "jx step validate --min-jx-version 1.2.36"
                        sh "echo $DOCKER_REGISTRY/$ORG/$APP_NAME:\$(cat VERSION)"
                        sh "jx step post build --image $DOCKER_REGISTRY/$ORG/$APP_NAME:\$(cat VERSION)"
                    }
                }
            }
        }

        stage('Promoting to Alpha') {
            when { branch 'build' }
            steps {
                dir(_CHARTS_PATH) {
                    container(JX_AGENT) {
                        // release the helm chart
                        sh 'make release'

                        // promote through all 'Auto' promotion Environments
                        sh 'jx promote -b --env $_ENV_ALPHA --timeout 1h --version \$(cat ../../VERSION)'
                    }
                }
            }
        }

        stage('Promoting to Beta') {
            when { branch 'master' }
            steps {
                dir(_CHARTS_PATH) {
                    container(JX_AGENT) {
                        sh 'jx step changelog --version v\$(cat ../../VERSION)'

                        // release the helm chart
                        sh 'make release'

                        // promote through all 'Auto' promotion Environments
                        sh 'jx promote -b --env $_ENV_BETA --timeout 1h --version \$(cat ../../VERSION)'
                    }
                }
            }
        }

    }
    post {
        always {
            cleanWs()
        }
    }
}
